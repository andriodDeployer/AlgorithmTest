/**
 * Created by DELL on 2019/1/16.
 *
 * 分治算法：分而治之，也就是将原问题划分成n个规模较小，并且结构与原问题相似的子问题，有各个小问题的结果，组合成大问题的结果。
 * 因为各个小问题的和原问题具有相同的结构，求解算法是一样的，通常情况下，对于分治的问题，可以采用递归的编程技巧来解决。
 *
 * 分治：是算法思想。递归：是编程技巧(方法的调用方式)
 * 一般来说分治算法比较合适使用递归来实现，分治算法的递归实现中，每一层递归都会设计这样三个操作：
 *  1.分解：将原问题分解成结构相似的子问题。
 *  2.解决：递归的求解各个子问题，若子问题足够小，则直接求解。
 *  3.合并：将子问题的结果合并成原问题的解。
 *
 *  一个问题可以采用分治算法来求解，通常这个问题需要满足，一下几个条件：
 *  1.原问题与分解成的小问题具有相同的模式。
 *  2.原问题分解成的多个子问题之间是相互独立的，子问题之间没有关联性，这一点是分治算法和动态规划的明显区别。
 *  3.子问题是有界限的，也就是当子问题分解成成一定程度，就不能在进行分解了。
 *  4.将多个子问题的结果合并成原问题的结果的操作的代价不能太大，否则就起不到降低事件复杂度的效果了，分治算法的优势也就不存在了。
 *
 *  正是因为分治算法中的各个子问题之间没有关联性，是独立的，每次计算只需要关注当前的子问题即可，所以分治算法相对来说还是简单。
 *  MapReduce是分治算法的经典案例。
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */
package thoughtofalgorithmic.divide;